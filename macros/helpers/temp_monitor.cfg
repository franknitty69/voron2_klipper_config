[delayed_gcode _TEMP_MONITOR]
initial_duration: 60.0
gcode:
	{% set verbose = printer["gcode_macro _USER_VARIABLES_OTHER"].verbose %}
	{% set mcu_target = printer["gcode_macro _USER_VARIABLES_OTHER"].mcu_target %}
	{% set host_target = printer["gcode_macro _USER_VARIABLES_OTHER"].host_target %}
	{% set encl_target = printer["gcode_macro _USER_VARIABLES_OTHER"].encl_target %}
	{% set period = printer["gcode_macro _USER_VARIABLES_OTHER"].period %}
	{% set default_speed = printer["gcode_macro _USER_VARIABLES_OTHER"].default_speed %}
	{% set printing_speed = printer["gcode_macro _USER_VARIABLES_OTHER"].printing_speed %}
	{% set max_speed = printer["gcode_macro _USER_VARIABLES_OTHER"].max_speed %}
	{% set min_speed = printer["gcode_macro _USER_VARIABLES_OTHER"].min_speed %}
	{% set threshold = printer["gcode_macro _USER_VARIABLES_OTHER"].threshold %}


	{% set mcu = printer['temperature_sensor Octopus'].temperature | float %}
	{% set host = printer['temperature_sensor RaspberryPi'].temperature | float %}
	{% set encl = printer['temperature_sensor chamber'].temperature | float %}

	{% if verbose %}
		{ action_respond_info("Entering Temp Montor routine") }
		{ action_respond_info("Printer state %s" % printer.idle_timeout.state) }
	{% endif %}

	{% if printer.idle_timeout.state == 'Printing' %}
		{% set min_speed = printing_speed %}
	{% endif %}

	{% if printer.idle_timeout.state != 'Idle' %}
		{% if mcu > (mcu_target * threshold) or host > (host_target * threshold) %}
			{% if verbose %}
				{ action_respond_info("MCU/Host temp (%.1f/%.1f) exceeds max fan threshold (%.1f/%.1f), setting cooling to %.0f%%" % (mcu, host, mcu_target*threshold,host_target * threshold,max_speed*100)) }
			{% endif %}
			SET_FAN_SPEED FAN=controller_fan SPEED={max_speed}
		{% elif mcu > mcu_target or host > host_target %}
			{% if verbose %}
				{ action_respond_info("MCU/Host temp (%.1f/%.1f) above target temp (%.1f/%.1f), setting cooling to %.0f%%" % (mcu, host, mcu_target, host_target,default_speed*100)) }
			{% endif %}    
			SET_FAN_SPEED FAN=controller_fan SPEED={default_speed}
		{% else %}
			{% if verbose %}
				{ action_respond_info("MCU/Host (%.1f/%.1f) temp below target temp (%.1f,%.1f) while %s, setting cooling to %.0f%%" % (mcu, host, mcu_target, host_target,printer.idle_timeout.state,min_speed*100)) }
			{% endif %}
			SET_FAN_SPEED FAN=controller_fan SPEED={min_speed}
		{% endif %}

		# {% if encl > (encl_target * threshold) %}
		# 	{% if verbose %}
		# 		{ action_respond_info("Enclosure temp (%.1f) exceeds max fan threshold (%.1f), setting exhaust to %.0f%%" % (encl, encl_target * threshold,max_speed*100)) }
		# 	{% endif %}
		# 	SET_FAN_SPEED FAN=chamber_fan SPEED={max_speed}
		# {% elif encl > encl_target %}
		# 	{% if verbose %}
		# 		{ action_respond_info("Enclosure temp (%.1f) above target temp (%.1f), setting exhaust to %.0f%%" % (encl, encl_target,default_speed*100)) }
		# 	{% endif %}    
		# 	SET_FAN_SPEED FAN=chamber_fan SPEED={default_speed}
		# {% else %}
		# 	{% if verbose %}
		# 		{ action_respond_info("Enclosure temp (%.1f) below target temp (%.1f), setting exhaust to %.0f%%" % (encl, encl_target,min_speed*100)) }
		# 	{% endif %}
		# 	SET_FAN_SPEED FAN=chamber_fan SPEED={min_speed}
		# {% endif %}
	{% else %}
		{% if verbose %}
			{ action_respond_info("Printer idle, skipping temperature checks. MCU: %.1f, Host: %.1f, Enclosure: %.1f." % (mcu, host, encl )) }
		{% endif %}
	{% endif %}

	{% if verbose %}
		{ action_respond_info("Exiting Temp Montor routine") }
	{% endif %}

  UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION={period}

[gcode_macro START_TEMP_MONITOR]
gcode:
 UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION=1

[gcode_macro STOP_TEMP_MONITOR]
gcode:
  UPDATE_DELAYED_GCODE ID=_TEMP_MONITOR DURATION=0

